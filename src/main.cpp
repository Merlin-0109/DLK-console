#include <iostream>
#include <string>
#include <limits>
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif
#ifndef NOMINMAX
#define NOMINMAX
#endif
#include <cstddef>
#include <windows.h>
#ifdef byte
#undef byte
#endif
#include <sstream>
#include "AuthSystem.h"
#include "Doctor.h"
#include "Patient.h"

using namespace std;

// H√†m x√≥a buffer input
void clearInputBuffer() {
    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
}

// H√†m hi·ªÉn th·ªã menu ch√≠nh
void displayMainMenu() {
    cout << "\n========================================" << endl;
    cout << "   H·ªÜ TH·ªêNG QU·∫¢N L√ù B·ªÜNH VI·ªÜN" << endl;
    cout << "========================================" << endl;
    cout << "1. ƒêƒÉng k√Ω" << endl;
    cout << "2. ƒêƒÉng nh·∫≠p" << endl;
    cout << "3. Tho√°t" << endl;
    cout << "========================================" << endl;
    cout << "Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n:";
}

// H√†m hi·ªÉn th·ªã menu ƒëƒÉng k√Ω
void displayRegisterMenu() {
    cout << "\n========================================" << endl;
    cout << "           ƒêƒÇNG K√ù T√ÄI KHO·∫¢N" << endl;
    cout << "========================================" << endl;
    cout << "Ch·ªçn lo·∫°i t√†i kho·∫£n:" << endl;
    cout << "1. B√°c sƒ©" << endl;
    cout << "2. B·ªánh nh√¢n" << endl;
    cout << "3. Tho√°t" << endl;
    cout << "========================================" << endl;
    cout << "Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n:";
}

// H√†m hi·ªÉn th·ªã menu sau khi ƒëƒÉng nh·∫≠p
void displayUserMenu(User* user) {
    cout << "\n========================================" << endl;
    cout << "   MENU NG∆Ø·ªúI D√ôNG - " << user->getUserTypeString() << endl;
    cout << "========================================" << endl;
    cout << "1. Xem th√¥ng tin c√° nh√¢n" << endl;
    
    // Ch·ªâ hi·ªÉn th·ªã t√πy ch·ªçn c·∫≠p nh·∫≠t cho Doctor v√† Patient
    if (user->getUserType() != ADMIN) {
        cout << "2. C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n" << endl;
    } else {
        cout << "2. ƒêƒÉng xu·∫•t" << endl;
    }
    cout << "3. ƒêƒÉng xu·∫•t" << endl;
    cout << "========================================" << endl;
    cout << "Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n:";
}

void displayDoctorChoice(){
    cout << "\n==========MENU B√ÅC Sƒ®==========" << endl;
    cout << "1. Xem l·ªãch kh√°m" << endl;
    cout << "2. T·ª´ ch·ªëi l·ªãch kh√°m" << endl;
    cout << "3. Xem th√¥ng tin c√° nh√¢n" << endl;
    cout << "4. C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n" << endl;
    cout << "5. ƒêƒÉng xu·∫•t" << endl;
    cout << "Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n:" ;
}
void displayPatientChoice(){
    cout << "\n========================================" << endl;
    cout << "           MENU BENH NHAN" << endl;
    cout << "========================================" << endl;
    cout << "1. Dat lich kham moi" << endl;
    cout << "2. Xem lich kham sap toi" << endl;
    cout << "3. Xem lich su kham benh" << endl;
    cout << "4. Doi lich kham" << endl;
    cout << "5. Huy lich kham" << endl;
    cout << "6. Xem thong tin ca nhan" << endl;
    cout << "7. Cap nhat thong tin ca nhan" << endl;
    cout << "8. Dang xuat" << endl;
    cout << "========================================" << endl;
    cout << "Nhap lua chon cua ban: ";
}

// H√†m ƒëƒÉng k√Ω Doctor
void registerDoctor(AuthSystem& authSystem) {
    string username, password;
    
    cout << "\n--- ƒêƒÉng k√Ω t√†i kho·∫£n B√°c sƒ© ---" << endl;
    cout << "CCCD: ";
    cin >> username;
    cout << "M·∫≠t kh·∫©u:";
    cin >> password;
    clearInputBuffer();
    authSystem.registerDoctor(username, password);
}

// H√†m ƒëƒÉng k√Ω Patient
void registerPatient(AuthSystem& authSystem) {
    string username, password;
    
    cout << "\n--- ƒêƒÉng k√Ω B·ªánh nh√¢n ---" << endl;
    cout << "CCCD: ";
    cin >> username;
    cout << "M·∫≠t kh·∫©u:";
    cin >> password;
    clearInputBuffer();
    authSystem.registerPatient(username, password);
}

// H√†m x·ª≠ l√Ω ƒëƒÉng k√Ω
void handleRegistration(AuthSystem& authSystem) {
    int choice;
        displayRegisterMenu();
        cin >> choice;
        
        if (cin.fail()) {
            clearInputBuffer();
            cout << "ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p m·ªôt s·ªë." << endl;
            return;
        }
        
        switch (choice) {
            case 1:
                registerDoctor(authSystem);
                break;
            case 2:
                registerPatient(authSystem);
                break;
            default:
                cout << "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng th·ª≠ l·∫°i." << endl;
                break;
        }
}

// H√†m x·ª≠ l√Ω ƒëƒÉng nh·∫≠p
User* handleLogin(AuthSystem& authSystem) {
    string username, password;
    
    cout << "\n--- ƒêƒÉng nh·∫≠p ---" << endl;
    cout << "CCCD: ";
    cin >> username;
    cout << "M·∫≠t kh·∫©u:";
    cin >> password;
    
    return authSystem.login(username, password);
}

// H√†m x·ª≠ l√Ω menu sau khi ƒëƒÉng nh·∫≠p
void handleUserSession(AuthSystem& authSystem, User* user) {
    int choice;
    bool logout = false;
    
    while (!logout) {
        if (user->getUserType() == ADMIN) {
            displayUserMenu(user);
            cin >> choice;
            // Menu cho Admin (ch·ªâ c√≥ 2 l·ª±a ch·ªçn)
            switch (choice) {
                case 1:
                    cout << endl;
                    user->displayInfo();
                    break;
                case 2:
                    authSystem.logout();
                    logout = true;
                    break;
                default:
                    cout << "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng th·ª≠ l·∫°i." << endl;
            }
        } 
        else if (user->getUserType() == DOCTOR){
            displayDoctorChoice();
            cin >> choice;
            switch (choice){
                case 1:// Xem l·ªãch kh√°m
                    break;
                case 2:// T·ª´ ch·ªëi l·ªãch kh√°m
                    break;
                case 3:// Xem th√¥ng tin c√° nh√¢n
                    user->displayInfo();
                    break;
                case 4:// C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
                    if (authSystem.updateUserProfile(user)) 
                            cout << "ƒê√£ l∆∞u th√¥ng tin th√†nh c√¥ng!" << endl;
                    else
                        cout << "L·ªói khi l∆∞u th√¥ng tin!" << endl;
                    break;
                case 5:
                    authSystem.logout();
                    logout = true;
                    break;
                default:
                    cout << "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá vui l√≤ng ch·ªçn l·∫°i" << endl;
            }
        }
        else if (user->getUserType() == PATIENT){
            Patient* patient = dynamic_cast<Patient*>(user);
            
            // Hi·ªÉn th·ªã s·ªë l·ªãch kh√°m ƒëang ch·ªù
            int activeCount = patient->countActiveAppointments();
            if (activeCount > 0) {
                cout << "\nüìã B·∫°n c√≥ " << activeCount << " l·ªãch kh√°m ƒëang ch·ªù." << endl;
            }
            
            displayPatientChoice();
            cin >> choice;
            
            switch (choice){
                case 1: { // ƒê·∫∑t l·ªãch kh√°m m·ªõi
                    string doctorId, date, time, reason;
                    
                    cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
                    cout << "‚ïë       ƒê·∫∂T L·ªäCH KH√ÅM M·ªöI              ‚ïë" << endl;
                    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;
                    
                    // Hi·ªÉn th·ªã danh s√°ch b√°c sƒ©
                    vector<string> doctorIDs = authSystem.getDataStore()->getAllDoctorIDs();
                    if (doctorIDs.empty()) {
                        cout << "Hi·ªán t·∫°i ch∆∞a c√≥ b√°c sƒ© n√†o trong h·ªá th·ªëng." << endl;
                        break;
                    }
                    
                    cout << "\nüìã DANH S√ÅCH B√ÅC Sƒ®:" << endl;
                    cout << "----------------------------------------" << endl;
                    for (const string& dId : doctorIDs) {
                        string data = authSystem.getDataStore()->loadDoctorData(dId);
                        if (!data.empty()) {
                            stringstream ss(data);
                            string type, id, username, password, email, fullName, spec;
                            getline(ss, type);
                            getline(ss, id);
                            getline(ss, username);
                            getline(ss, password);
                            getline(ss, email);
                            getline(ss, fullName);
                            getline(ss, spec);
                            
                            cout << "üë®‚Äç‚öïÔ∏è M√£ BS: " << id;
                            cout << " | T√™n: " << (fullName.empty() ? username : fullName);
                            if (!spec.empty()) cout << " | Chuy√™n khoa: " << spec;
                            cout << endl;
                        }
                    }
                    cout << "----------------------------------------" << endl;
                    
                    cin.ignore();
                    cout << "\nüìù Nh·∫≠p th√¥ng tin ƒë·∫∑t l·ªãch:" << endl;
                    cout << "M√£ b√°c sƒ©: ";
                    getline(cin, doctorId);
                    
                    cout << "Ng√†y kh√°m (DD/MM/YYYY): ";
                    getline(cin, date);
                    
                    cout << "Gi·ªù kh√°m (HH:MM): ";
                    getline(cin, time);
                    
                    cout << "L√Ω do kh√°m: ";
                    getline(cin, reason);
                    
                    patient->bookAppointment(doctorId, date, time, reason);
                    break;
                }
                case 2: // Xem l·ªãch kh√°m s·∫Øp t·ªõi
                    patient->viewUpcomingAppointments();
                    break;
                case 3: // Xem l·ªãch s·ª≠ kh√°m b·ªánh
                    patient->viewAppointmentHistory();
                    break;
                case 4: { // ƒê·ªïi l·ªãch kh√°m
                    string appointmentId, newDate, newTime;
                    cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
                    cout << "‚ïë       ƒê·ªîI L·ªäCH KH√ÅM                  ‚ïë" << endl;
                    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;
                    
                    // Hi·ªÉn th·ªã l·ªãch kh√°m hi·ªán t·∫°i
                    patient->viewUpcomingAppointments();
                    
                    cin.ignore();
                    cout << "\nNh·∫≠p m√£ l·ªãch kh√°m c·∫ßn ƒë·ªïi: ";
                    getline(cin, appointmentId);
                    
                    cout << "Ng√†y kh√°m m·ªõi (DD/MM/YYYY): ";
                    getline(cin, newDate);
                    
                    cout << "Gi·ªù kh√°m m·ªõi (HH:MM): ";
                    getline(cin, newTime);
                    
                    patient->rescheduleAppointment(appointmentId, newDate, newTime);
                    break;
                }
                case 5: { // H·ªßy l·ªãch kh√°m
                    string appointmentId;
                    cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
                    cout << "‚ïë       H·ª¶Y L·ªäCH KH√ÅM                  ‚ïë" << endl;
                    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;
                    
                    // Hi·ªÉn th·ªã l·ªãch kh√°m hi·ªán t·∫°i
                    patient->viewUpcomingAppointments();
                    
                    cin.ignore();
                    cout << "\nNh·∫≠p m√£ l·ªãch kh√°m c·∫ßn h·ªßy: ";
                    getline(cin, appointmentId);
                    patient->cancelAppointment(appointmentId);
                    break;
                }
                case 6: // Xem th√¥ng tin c√° nh√¢n
                    patient->displayInfo();
                    break;
                case 7: // C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
                    if (authSystem.updateUserProfile(patient)) 
                        cout << "‚úì ƒê√£ l∆∞u th√¥ng tin th√†nh c√¥ng!" << endl;
                    else
                        cout << "‚úó L·ªói khi l∆∞u th√¥ng tin!" << endl;
                    break;
                case 8: // ƒêƒÉng xu·∫•t
                    cout << "\nüëã ƒêƒÉng xu·∫•t th√†nh c√¥ng. H·∫πn g·∫∑p l·∫°i!" << endl;
                    authSystem.logout();
                    logout = true;
                    break;
                default:
                    cout << "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn t·ª´ 1-8" << endl;
            }
        }   
    }
}

// H√†m main
int main() {
    // Thi·∫øt l·∫≠p UTF-8 cho console
    SetConsoleOutputCP(65001);
    SetConsoleCP(65001);
    
    AuthSystem authSystem;
    int choice;
    bool exit = false;
    
    cout << "========================================" << endl;
    cout << "   Ch√†o m·ª´ng ƒë·∫øn H·ªá th·ªëng B·ªánh vi·ªán!" << endl;
    cout << "========================================" << endl;
    
    while (!exit) {
        displayMainMenu();
        cin >> choice;
        
        if (cin.fail()) {
            clearInputBuffer();
            cout << "ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p m·ªôt s·ªë" << endl;
            continue;
        } 

        switch (choice) {
            case 1:{
                handleRegistration(authSystem);
                User* user = handleLogin(authSystem);
                if (user != nullptr) {
                    handleUserSession(authSystem, user);
                }
                break;
            }
            case 2:{
                User* user = handleLogin(authSystem);
                if (user != nullptr) {
                    handleUserSession(authSystem, user);
                }
                break;
            }
            case 3:
                cout << "\nC·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng. T·∫°m bi·ªát!" << endl;
                exit = true;
                break;
            default:
                cout << "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng th·ª≠ l·∫°i." << endl;
                break;
        }
    }
    return 0;
}
